{"version":3,"sources":["components/Chart/useChart.tsx","components/Chart/chart.tsx","api/Api.ts","components/Dashboard/useDashboard.tsx","components/Dashboard/dashboard.tsx","components/Filter/filter.tsx","App.tsx","index.tsx"],"names":["useChart","metrics","getSeries","clicks","impressions","series","data","name","_","forEach","values","push","Clicks","Impressions","useState","xAxis","categories","chartOptions","setChartOptions","useEffect","chart","zoomType","title","text","Array","from","Object","keys","type","yAxis","labels","enabled","Chart","Box","highcharts","Highcharts","options","mergeDates","mergedDates","key","reducedArray","reduce","result","value","filterMetrics","activeFilters","nextFilter","currentFilter","filteredMetrics","filter","length","getFilters","campaigns","groupBy","dataSources","fetchMetrics","a","Promise","resolve","reject","Papa","parse","download","header","delimiter","dynamicTyping","fastMode","complete","results","rawMetrics","filters","byDate","error","Error","useDashboard","setMetrics","setFilters","campaignFilter","setCampaignFilter","sourceFilter","setSourceFilter","Campaign","Datasource","metricsData","fetchFilteredMetrics","Dashboard","padding","Typography","variant","gutterBottom","Filter","display","flexDirection","flex","paddingRight","FormControl","fullWidth","Autocomplete","id","renderInput","params","TextField","label","margin","onChange","event","paddingLeft","App","Container","fixed","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"kPAwDeA,EApDE,SAACC,GAChB,IAAMC,EAAY,WAChB,IAAMC,EAAmB,GACnBC,EAAwB,GACxBC,EAAS,CACb,CAAEC,KAAMH,EAAQI,KAAM,UACtB,CAAED,KAAMF,EAAaG,KAAM,gBAM7B,OAJAC,IAAEC,QAAQR,GAAS,SAACS,GAClBP,EAAOQ,KAAKD,EAAOE,QACnBR,EAAYO,KAAKD,EAAOG,gBAEnBR,GAZ4B,EAeGS,mBAAS,CAC/CC,MAAO,CACLC,WAAY,CAAC,KAEfX,OAAQH,MAnB2B,mBAe9Be,EAf8B,KAehBC,EAfgB,KA+CrC,OAzBAC,qBAAU,WACR,IAAMC,EAAQ,CACZA,MAAO,CACLC,SAAU,KAEZC,MAAO,CACLC,KAAM,IAERR,MAAO,CACLC,WAAYQ,MAAMC,KAAKC,OAAOC,KAAK1B,IACnC2B,KAAM,YAERC,MAAO,CACLP,MAAO,CACLC,KAAM,IAERO,OAAQ,CACNC,SAAS,IAGb1B,OAAQH,KAEVgB,EAAgBE,KACf,CAACnB,IAEG,CACLgB,iBCpCWe,EATD,SAAC,GAAuC,IAArC/B,EAAoC,EAApCA,QACPgB,EAAiBjB,EAASC,GAA1BgB,aACR,OACE,cAACgB,EAAA,EAAD,UACE,cAAC,IAAD,CAAiBC,WAAYC,EAAYC,QAASnB,O,mDCPlDoB,EAAa,SAACpC,GAClB,IAAMqC,EAA2C,GAWjD,OAVA9B,IAAEC,QAAQR,GAAS,SAACS,EAAQ6B,GAC1B,IAAMC,EAAehC,IAAEiC,OAAO/B,GAAQ,SAACgC,EAAQC,GAK7C,MAJa,CACX/B,OAAQ8B,EAAO9B,OAAS+B,EAAM/B,OAC9BC,YAAa6B,EAAO7B,YAAc8B,EAAM9B,gBAI5CyB,EAAYC,GAAOC,KAEdF,GAGHM,EAAgB,SAAhBA,EAAiB3C,EAAwB4C,EAA8BC,GAC3E,IAAIC,EAAgBD,GAAc,EAC9BE,EAAkBxC,IAAEyC,OAAOhD,EAAS4C,EAAcE,IAItD,OAHIA,EAAgBF,EAAcK,OAAS,IACzCF,EAAkBJ,EAAcI,EAAiBH,EAAgBE,EAAgB,IAE5EC,GAGHG,EAAa,SAAClD,GAGlB,MAAO,CAAEmD,UAFS5B,MAAMC,KAAKC,OAAOC,KAAKnB,IAAE6C,QAAQpD,EAAS,cAExCqD,YADA9B,MAAMC,KAAKC,OAAOC,KAAKnB,IAAE6C,QAAQpD,EAAS,kBAInDsD,EAAY,uCAAG,WAAOV,GAAP,SAAAW,EAAA,+EACnB,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IACEC,IAAKC,MAAM,eAAgB,CACzBC,UAAU,EACVC,QAAQ,EACRC,UAAW,IACXC,eAAe,EACfC,UAAU,EACVC,SAAU,SAACC,GACT,IAAMC,EAAaD,EAAQ9D,KACrB0C,GAA8C,OAAbH,QAAa,IAAbA,OAAA,EAAAA,EAAeK,QAClDN,EAAcyB,EAAYxB,GACzBwB,EACCC,EAAUnB,EAAWH,GACrBuB,EAAS/D,IAAE6C,QAAQL,EAAiB,QACpC/C,EAAUoC,EAAWkC,GAC3Bb,EAAQ,CAAEzD,UAASqE,eAGvB,MAAOE,GACPb,EAAO,IAAIc,MAAMD,SArBK,2CAAH,sDCHVE,EA5BM,WAAO,IAAD,EACK5D,qBADL,mBAClBb,EADkB,KACT0E,EADS,OAEK7D,qBAFL,mBAElBwD,EAFkB,KAETM,EAFS,OAGmB9D,mBAAwB,MAH3C,mBAGlB+D,EAHkB,KAGFC,EAHE,OAIehE,mBAAwB,MAJvC,mBAIlBiE,EAJkB,KAIJC,EAJI,KAkBzB,OAZA7D,qBAAU,YACkB,uCAAG,8BAAAqC,EAAA,6DACrBX,EAA+B,GACjCgC,GAAgBhC,EAAclC,KAAK,CAAEsE,SAAUJ,IAC/CE,GAAclC,EAAclC,KAAK,CAAEuE,WAAYH,IAHxB,SAIDxB,EAAaV,GAJZ,OAIrBsC,EAJqB,OAK3BR,EAAWQ,EAAYlF,SACvB2E,EAAWO,EAAYb,SANI,2CAAH,qDAQ1Bc,KACC,CAACP,EAAgBE,IAEb,CACL9E,UACAqE,UACAO,iBACAC,oBACAC,eACAC,oBCDWK,EArBG,WAAO,IAAD,EACyEX,IAAvFzE,EADc,EACdA,QAASqE,EADK,EACLA,QAASO,EADJ,EACIA,eAAgBC,EADpB,EACoBA,kBAAmBC,EADvC,EACuCA,aAAcC,EADrD,EACqDA,gBAC3E,OACE,eAAC/C,EAAA,EAAD,CAAKqD,QAAQ,SAAb,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,cAAY,EAArC,+BACkBV,GAAgB,cADlC,0BACiEF,GAAkB,gBADnF,OAGC5E,GAAW,cAAC,EAAD,CAAOA,QAASA,IAC3BqE,GACC,cAAC,EAAD,CACEA,QAASA,EACTO,eAAgBA,EAChBC,kBAAmBA,EACnBC,aAAcA,EACdC,gBAAiBA,Q,mCC2BZU,EAhCA,SAAC,GAAgG,IAA9FpB,EAA6F,EAA7FA,QAASO,EAAoF,EAApFA,eAAgBC,EAAoE,EAApEA,kBAAmBC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,gBAClE5B,EAA2BkB,EAA3BlB,UAAWE,EAAgBgB,EAAhBhB,YACnB,OACE,eAACrB,EAAA,EAAD,CAAK0D,QAAQ,OAAOC,cAAc,MAAlC,UACE,cAAC3D,EAAA,EAAD,CAAK0D,QAAQ,OAAOE,KAAK,IAAIC,aAAa,OAA1C,SACE,cAACC,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACED,WAAS,EACTE,GAAG,oBACH9D,QAASkB,EACT6C,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,cAAcC,OAAO,aAC3E5D,MAAOoC,EACPyB,SAAU,SAACC,EAAO9D,GAAR,OAAkBqC,EAAgBrC,UAIlD,cAACV,EAAA,EAAD,CAAK0D,QAAQ,OAAOE,KAAK,IAAIa,YAAY,OAAzC,SACE,cAACX,EAAA,EAAD,CAAaC,WAAS,EAAtB,SACE,cAACC,EAAA,EAAD,CACED,WAAS,EACTE,GAAG,kBACH9D,QAASgB,EACT+C,YAAa,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,WAAWC,OAAO,aACxE5D,MAAOkC,EACP2B,SAAU,SAACC,EAAO9D,GAAR,OAAkBmC,EAAkBnC,cC1B3CgE,MARf,WACE,OACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,cAAC,EAAD,OCFNC,IAASC,OACP,qCACE,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.706078aa.chunk.js","sourcesContent":["import { Metrics } from 'api/Api';\nimport _ from 'lodash';\nimport { useEffect, useState } from 'react';\n\nconst useChart = (metrics: Metrics) => {\n  const getSeries = () => {\n    const clicks: number[] = [];\n    const impressions: number[] = [];\n    const series = [\n      { data: clicks, name: 'Clicks' },\n      { data: impressions, name: 'Impressions' },\n    ];\n    _.forEach(metrics, (values) => {\n      clicks.push(values.Clicks);\n      impressions.push(values.Impressions);\n    });\n    return series;\n  };\n\n  const [chartOptions, setChartOptions] = useState({\n    xAxis: {\n      categories: [''],\n    },\n    series: getSeries(),\n  });\n\n  useEffect(() => {\n    const chart = {\n      chart: {\n        zoomType: 'x',\n      },\n      title: {\n        text: '',\n      },\n      xAxis: {\n        categories: Array.from(Object.keys(metrics)),\n        type: 'datetime',\n      },\n      yAxis: {\n        title: {\n          text: '',\n        },\n        labels: {\n          enabled: true,\n        },\n      },\n      series: getSeries(),\n    };\n    setChartOptions(chart);\n  }, [metrics]);\n\n  return {\n    chartOptions,\n  };\n};\n\nexport default useChart;\n","import React from 'react';\nimport * as Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { Metrics } from 'api/Api';\nimport { Box } from '@material-ui/core';\nimport useChart from './useChart';\n\nconst Chart = ({ metrics }: { metrics: Metrics }) => {\n  const { chartOptions } = useChart(metrics);\n  return (\n    <Box>\n      <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n    </Box>\n  );\n};\n\nexport default Chart;\n","/* eslint-disable import/prefer-default-export */\nimport Papa from 'papaparse';\nimport _ from 'lodash';\n\nconst mergeDates = (metrics: Record<string, MetricsData[]>) => {\n  const mergedDates: Record<string, MetricsData> = {};\n  _.forEach(metrics, (values, key) => {\n    const reducedArray = _.reduce(values, (result, value) => {\n      const date = {\n        Clicks: result.Clicks + value.Clicks,\n        Impressions: result.Impressions + value.Impressions,\n      };\n      return date;\n    }) as MetricsData;\n    mergedDates[key] = reducedArray;\n  });\n  return mergedDates;\n};\n\nconst filterMetrics = (metrics: MetricsData[], activeFilters: ActiveFilters, nextFilter?: number) => {\n  let currentFilter = nextFilter || 0;\n  let filteredMetrics = _.filter(metrics, activeFilters[currentFilter]) as MetricsData[];\n  if (currentFilter < activeFilters.length - 1) {\n    filteredMetrics = filterMetrics(filteredMetrics, activeFilters, (currentFilter = +1));\n  }\n  return filteredMetrics;\n};\n\nconst getFilters = (metrics: MetricsData[]) => {\n  const campaigns = Array.from(Object.keys(_.groupBy(metrics, 'Campaign')));\n  const dataSources = Array.from(Object.keys(_.groupBy(metrics, 'Datasource')));\n  return { campaigns, dataSources };\n};\n\nexport const fetchMetrics = async (activeFilters?: ActiveFilters): Promise<MetricsResponse> => {\n  return new Promise((resolve, reject) => {\n    try {\n      Papa.parse('api/data.csv', {\n        download: true,\n        header: true,\n        delimiter: ',',\n        dynamicTyping: true,\n        fastMode: true,\n        complete: (results) => {\n          const rawMetrics = results.data as MetricsData[];\n          const filteredMetrics: MetricsData[] = activeFilters?.length\n            ? filterMetrics(rawMetrics, activeFilters)\n            : (rawMetrics as MetricsData[]);\n          const filters = getFilters(filteredMetrics);\n          const byDate = _.groupBy(filteredMetrics, 'Date') as Record<string, MetricsData[]>;\n          const metrics = mergeDates(byDate);\n          resolve({ metrics, filters });\n        },\n      });\n    } catch (error) {\n      reject(new Error(error));\n    }\n  });\n};\n\nexport type Filters = {\n  dataSources: string[];\n  campaigns: string[];\n};\n\nexport type ActiveFilters = Record<string, string | null>[];\n\nexport type MetricsData = {\n  Date?: string;\n  DataSource?: string;\n  Campaign?: string;\n  Clicks: number;\n  Impressions: number;\n};\nexport type Metrics = Record<string, MetricsData>;\n\nexport type MetricsResponse = {\n  metrics: Metrics;\n  filters: Filters;\n};\n","import { useEffect, useState } from 'react';\nimport { fetchMetrics, Metrics, Filters, ActiveFilters } from 'api/Api';\n\nconst useDashboard = () => {\n  const [metrics, setMetrics] = useState<Metrics>();\n  const [filters, setFilters] = useState<Filters>();\n  const [campaignFilter, setCampaignFilter] = useState<string | null>(null);\n  const [sourceFilter, setSourceFilter] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchFilteredMetrics = async () => {\n      const activeFilters: ActiveFilters = [];\n      if (campaignFilter) activeFilters.push({ Campaign: campaignFilter });\n      if (sourceFilter) activeFilters.push({ Datasource: sourceFilter });\n      const metricsData = await fetchMetrics(activeFilters);\n      setMetrics(metricsData.metrics);\n      setFilters(metricsData.filters);\n    };\n    fetchFilteredMetrics();\n  }, [campaignFilter, sourceFilter]);\n\n  return {\n    metrics,\n    filters,\n    campaignFilter,\n    setCampaignFilter,\n    sourceFilter,\n    setSourceFilter,\n  };\n};\n\nexport default useDashboard;\n","import React from 'react';\nimport { Chart, Filter } from 'components';\nimport { Box, Typography } from '@material-ui/core';\nimport useDashboard from './useDashboard';\n\nconst Dashboard = () => {\n  const { metrics, filters, campaignFilter, setCampaignFilter, sourceFilter, setSourceFilter } = useDashboard();\n  return (\n    <Box padding=\"20px 0\">\n      <Typography variant=\"h6\" gutterBottom>\n        {`Datasource \"${sourceFilter || 'All Sources'}\" and metrics \"${campaignFilter || 'All Campaigns'}\"`}\n      </Typography>\n      {metrics && <Chart metrics={metrics} />}\n      {filters && (\n        <Filter\n          filters={filters}\n          campaignFilter={campaignFilter}\n          setCampaignFilter={setCampaignFilter}\n          sourceFilter={sourceFilter}\n          setSourceFilter={setSourceFilter}\n        />\n      )}\n    </Box>\n  );\n};\n\nexport default Dashboard;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React from 'react';\nimport { Filters } from 'api/Api';\nimport { FormControl, Box, TextField } from '@material-ui/core';\nimport { Autocomplete } from '@material-ui/lab';\n\ninterface FilterProps {\n  filters: Filters;\n  campaignFilter: string | null;\n  setCampaignFilter: (value: string | null) => void;\n  sourceFilter: string | null;\n  setSourceFilter: (value: string | null) => void;\n}\n\nconst Filter = ({ filters, campaignFilter, setCampaignFilter, sourceFilter, setSourceFilter }: FilterProps) => {\n  const { campaigns, dataSources } = filters;\n  return (\n    <Box display=\"flex\" flexDirection=\"row\">\n      <Box display=\"flex\" flex=\"1\" paddingRight=\"10px\">\n        <FormControl fullWidth>\n          <Autocomplete\n            fullWidth\n            id=\"datasource-filter\"\n            options={dataSources}\n            renderInput={(params) => <TextField {...params} label=\"Data Source\" margin=\"normal\" />}\n            value={sourceFilter}\n            onChange={(event, value) => setSourceFilter(value)}\n          />\n        </FormControl>\n      </Box>\n      <Box display=\"flex\" flex=\"1\" paddingLeft=\"10px\">\n        <FormControl fullWidth>\n          <Autocomplete\n            fullWidth\n            id=\"campaign-filter\"\n            options={campaigns}\n            renderInput={(params) => <TextField {...params} label=\"Campaign\" margin=\"normal\" />}\n            value={campaignFilter}\n            onChange={(event, value) => setCampaignFilter(value)}\n          />\n        </FormControl>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport { Dashboard } from './components';\n\nfunction App() {\n  return (\n    <Container fixed>\n      <Dashboard />\n    </Container>\n  );\n}\n\nexport default App;\n","import { CssBaseline } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}